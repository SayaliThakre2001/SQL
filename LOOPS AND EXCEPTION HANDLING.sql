-- LOOP
DELIMITER //
CREATE PROCEDURE LOOP_DEMO1()
BEGIN
DECLARE VAL INT;
DECLARE RESULT VARCHAR(50);
SET VAL =1;
SET RESULT ='';
LOOP_LABEL: LOOP
IF VAL>10 THEN
LEAVE LOOP_LABEL;
END IF;
SET RESULT =CONCAT(RESULT,VAL,',');
SET VAL=VAL+1;
ITERATE LOOP_LABEL;
END LOOP;
SELECT RESULT;
END //
DELIMITER ;

CALL LOOP_DEMO1();

-- WHILE LOOP
DELIMITER //
CREATE PROCEDURE LOOP_DEMO2()
BEGIN
DECLARE i INT;
SET i=1;
LOOP1: WHILE i<=10 DO
IF MOD(i,2)!=0 then
SELECT CONCAT(i,"is an odd number");
END IF;
SET i=i+1;
end while loop1;
end //
delimiter ;

call LOOP_DEMO2();

-- REPEAT UNTIL LOOP
DELIMITER //
CREATE PROCEDURE LOOP_DEMO3()
BEGIN
DECLARE I INT;
SET I=0;
LOOP1: REPEAT
SET I=I+1;
IF MOD(I,2)!=0 THEN
SELECT CONCAT(I," IS AN ODD NUMBER");
END IF;
UNTIL I>=10
END REPEAT;
END //
DELIMITER ;

CALL LOOP_DEMO3();


-- EXCEPTION HANDLING
CREATE TABLE PAYMENTS(CID INT,AMOUNT INT NOT NULL);

INSERT INTO PAYMENTS VALUES(1,500);
INSERT INTO PAYMENTS VALUES(2,NULL);
DESC PAYMENTS;

CREATE TABLE FRAUD
 (CID INT,
 MESSAGE VARCHAR(50),
 TIME_OF_FRAUD DATETIME);
 
 DELIMITER //
 CREATE PROCEDURE P_PAYMENTS(IN P_CID INT,IN P_AMOUNT INT)
 BEGIN
 DECLARE CONTINUE HANDLER FOR 1048
 BEGIN
 INSERT INTO FRAUD VALUES (P_CID,"FRAUD TRANSACTION",NOW());
 END;
 INSERT INTO PAYMENTS VALUES(P_CID,P_AMOUNT);
 SELECT "SUCCESSFUL" AS MESSAGE;
 END //
 DELIMITER ;
 
 CALL P_PAYMENTS(5,NULL);
 SELECT * FROM PAYMENTS;
 SELECT * FROM FRAUD;
 
 
 
 
 














